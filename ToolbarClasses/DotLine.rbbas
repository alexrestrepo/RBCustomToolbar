#tag ModuleProtected Module DotLine	#tag Method, Flags = &h0		Sub DotLine(g as Graphics, x1 as integer, y1 as Integer, x2 as integer, y2 as integer, Pat as String)		  		  Dim x,y,linlen,xtr,sgn as Integer		  Dim LinAng As Double		  		  SetPattern(pat)		  		  LinLen=sqrt(pow(y1-y2,2)+pow(x1-x2,2))		  LinAng=Atan((y1-y2)/(x1-x2))		  		  sgn=(x2-x1)/abs(x2-x1)		  if sgn<>1 then		    sgn=-1		  end if		  		  For x= 0 to LinLen/Len(Pat)-1		    For y= 0 to Ubound(p) step 2		      xtr=x*Len(pat)		      g.drawline x1+(((p(y+1)+xtr)*cos(LinAng))*sgn),y1+(((p(y+1)+xtr)*sin(LinAng))*sgn),x1+(((p(y)+xtr)*cos(LinAng))*sgn),y1+(((p(y)+xtr)*sin(LinAng))*sgn)		    next		  Next		  		  For x=1 to LinLen-(((LinLen\Len(Pat)))*Len(Pat))		    If mid(Pat,x,1)="1" then		      g.drawline x1+(((x+(xtr+len(pat)))*cos(LinAng))*sgn),y1+(((x+(xtr+len(pat)))*sin(LinAng))*sgn),x1+(((x+(xtr+len(pat)))*cos(LinAng))*sgn),y1+(((x+(xtr+len(pat)))*sin(LinAng))*sgn)		    end if		  next		  		  redim p(0)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DotRect(g as Graphics, x1 as integer, y1 as Integer, x2 as integer, y2 as integer, Pat as String)		  		  Dim x,y,xtr as Integer		  		  SetPattern(pat)		  		  For x= 0 to (x2-x1)/Len(Pat)-1		    For y= 0 to Ubound(p) step 2		      xtr=x*Len(pat)		      g.drawline x1+p(y)+xtr,y1,x1+p(y+1)+xtr,y1		      g.drawline x1+p(y)+xtr,y2,x1+p(y+1)+xtr,y2		    next		  Next		  For x=1 to (x2-x1)-((((x2-x1)\Len(Pat)))*Len(Pat))		    If mid(Pat,x,1)="1" then		      g.pixel(x1+x+xtr+len(pat),y1)=g.forecolor		      g.pixel(x1+x+xtr+len(pat),y2)=g.forecolor		    end if		  next		  		  For x= 0 to (y2-y1)/Len(Pat)-1		    For y= 0 to Ubound(p) step 2		      xtr=x*Len(pat)		      g.drawline x2,y1+p(y)+xtr,x2,y1+p(y+1)+xtr		      g.drawline x1,y1+p(y)+xtr,x1,y1+p(y+1)+xtr		    next		  Next		  For x=1 to (y2-y1)-((((y2-y1)\Len(Pat)))*Len(Pat))		    If mid(Pat,x,1)="1" then		      g.pixel(x1,y1+x+xtr+len(pat))=g.forecolor		      g.pixel(x2,y1+x+xtr+len(pat))=g.forecolor		    end if		  next		  		  redim p(0)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub SetPattern(Data as String)		  		  Dim X as integer		  Dim Inside as Boolean		  		  p.remove 0		  		  For x=1 to len(Data)		    If mid(data,x,1)="1" then		      If Not Inside then		        Inside=True		        p.append x		      end if		    else		      If Inside then		        p.append x-1		        Inside=False		      end if		    end if		  next		  		  If Inside then		    p.append x-1		    Inside=False		  end if		  		End Sub	#tag EndMethod	#tag Note, Name = About		© Copyright. 1999 by Søren Olin		You are free to use this module in any type of appliaction, only requirement: 		you will need to give credit to 'Søren Olin' in the about box or your applications documentation.			#tag EndNote	#tag Property, Flags = &h1		Protected p(0) As Integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule