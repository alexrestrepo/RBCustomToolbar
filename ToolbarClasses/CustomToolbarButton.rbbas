#tag ClassProtected Class CustomToolbarButtonInherits CustomToolbarItem	#tag Event		Sub CaptionChanged()		  //recalculate buffer, just in case		  		  dim p as picture		  dim tmpw as integer		  		  p=newpicture(2,2,16)		  p.graphics.textfont="Arial"		  p.graphics.textsize=10		  		  tmpw=p.graphics.stringwidth(caption)		  if w>tmpw then tmpw=w		  if tmpw<>w then		    setupBuffer(tmpw,h)		  end if		End Sub	#tag EndEvent	#tag Event		Sub Draw(g as graphics, dragging as boolean)		  //draw this button		  #pragma disableBackgroundTasks		  #pragma disableBoundsChecking		  		  dim off,strw, tmp as integer		  dim arrowPts(6) as integer		  		  g.clearrect 0,0,g.width,g.height		  		  if toggles and value then		    g.foreColor=&ccccccc		    off=parent.getitemSize		    g.fillroundRect self.w/2-off/2,0,off,off,5,5		  end if		  		  off=0		  if over then off=1		  if image<>nil then		    if enabled then		      g.drawpicture image,me.w/2-image.width/2-off,parent.getitemSize/2-image.height/2-off		    else		      g.drawpicture disabledImg,me.w/2-image.width/2-off,parent.getitemSize/2-image.height/2-off		    end if		  else		    g.foreColor=&cAAAAAA		    off=parent.getitemSize		    tmp=self.w/2-off/2		    dotRect(g, tmp,0,tmp+off-1,off-1,"0011")		    		    g.bold=true		    g.textsize=18		    g.drawString "?", g.width/2-g.stringWidth("?")/2, g.height/2		    g.bold=false		  end if		  		  if parent.drawText then		    if enabled then		      g.foreColor=&c000000		    else		      g.foreColor=&c888888		    end if		    g.textsize=10		    g.textfont="Arial"		    strw=g.stringwidth(caption)		    g.drawstring caption,g.width/2-strw/2,g.height-g.textascent+5		  end if		  		  //if submenu... draw the little arrow		  if menuitems<>"" then		    arrowPts(1)=g.width-10		    arrowPts(2)=g.height-6		    arrowPts(3)=g.width		    arrowPts(4)=g.height-6		    arrowPts(5)=g.width-5		    arrowPts(6)=g.height		    g.foreColor=&c000000		    g.fillpolygon arrowPts		    g.foreColor=&cffffff		    g.drawpolygon arrowPts		  end if		End Sub	#tag EndEvent	#tag Event		Function MouseDown(x as integer, y as integer) As boolean		  if not enabled then return false		  if toggles then		    value=not value		    parent.repaint		  end if		  action		  return true		End Function	#tag EndEvent	#tag Event		Sub MouseLeave()		  over=false		  mouseLeave		End Sub	#tag EndEvent	#tag Event		Sub MouseOver(x as integer, y as integer)		  if description<>"" then		    parent.helpTag=description		  else		    parent.helpTag=caption		  end if		  over=true		  parent.repaint		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Constructor()		  me.Constructor(0,0,32,32,nil,"",nil)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(x as integer, y as integer, w as integer, h as integer, image as picture, caption as string, toolbar as customToolbar)		  dim p as picture		  dim tmpw as integer		  		  p=newpicture(2,2,16)		  p.graphics.textfont="Arial"		  p.graphics.textsize=10		  		  tmpw=p.graphics.stringwidth(caption)		  if w>tmpw then tmpw=w		  		  super.Constructor(x,y,tmpw,h+5+p.graphics.textAscent,toolbar)		  self.image=image		  self.caption=caption		  		  enabled=true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(x as integer, y as integer, w as integer, h as integer, image as picture, caption as string, toolbar as customToolbar, menuItems as string)		  me.Constructor(x,y,w,h,image,caption,toolbar)		  self.menuItems=menuItems		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function enabled() As boolean		  return _enabled		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub enabled(assigns value as boolean)		  _enabled=value		  		  //create the "disabled" image		  if not value and disabledImg=nil and image<>nil then		    disabledImg=newpicture(image.width,image.height,32)		    disabledImg.graphics.drawpicture image,0,0		    		    disabledImg.mask.graphics.foreColor=&c888888		    disabledImg.mask.graphics.fillrect 0,0,image.width,image.height		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function image() As picture		  return _image		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub image(assigns pic as picture)		  _image=pic		  if parent<>nil then parent.repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function toggles() As boolean		  return _toggles		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub toggles(assigns value as boolean)		  _toggles=value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function value() As boolean		  return _value		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub value(assigns state as boolean)		  _value=state		  if state then action		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Action()	#tag EndHook	#tag Hook, Flags = &h0		Event MouseLeave()	#tag EndHook	#tag Hook, Flags = &h0		Event MouseOver()	#tag EndHook	#tag Property, Flags = &h1		Protected disabledImg As picture	#tag EndProperty	#tag Property, Flags = &h0		menuItems As string	#tag EndProperty	#tag Property, Flags = &h1		Protected over As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected _enabled As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected _image As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected _toggles As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected _value As boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="menuItems"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass