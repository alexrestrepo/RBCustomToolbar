#tag ClassProtected Class CustomToolbarInherits Canvas	#tag Event		Sub Close()		  //this is buggy as heck		  if autoSaveState then saveState		End Sub	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  dim i as integer		  dim modDown as boolean		  		  oldx=x		  for i=0 to ubound(items)		    //check if we need to "move" an item		    #if targetMacOS		      modDown=keyboard.AsyncCommandKey		    #else		      modDown=keyboard.AsyncControlKey		    #endif		    		    //check for hit		    if items(i).checkMouseDown(x,y,modDown) then 		      lastindex=i		      lastClickedItem=items(i)		      if not modDown and lastClickedItem isa CustomToolbarButton then 		        handleButtonHit customToolbarButton(lastClickedItem)		      end if		      		      return true and modDown		    end if		  next		  		  if IsContextualClick then		    buttonMenuWin.toolbarbuttonmenu.deleteAllRows		    buttonMenuWin.toolbarButtonMenu.addRow "Icon only"		    buttonMenuWin.toolbarButtonMenu.addRow "Icon and text"		    buttonMenuWin.toolbarbuttonmenu.open		  end if		  		  lastindex=-1		  lastclickedItem=nil		  return false		End Function	#tag EndEvent	#tag Event		Sub MouseDrag(X As Integer, Y As Integer)		  #pragma disableBackgroundTasks		  #pragma DisableBoundsChecking		  		  dim i,j as integer		  dim tmp as customToolbaritem		  		  dragged=false		  if lastclickedItem<>nil  and draggable then		    		    if lastclickedItem.x>=itemseparation and lastclickedItem.getLastX<=getNextX then		      		      //start drag		      lastClickedItem.offset(x-oldx,0)		      		      //organize		      //going left...		      if lastindex>0 and lastclickedItem.x<=items(lastindex-1).x+items(lastindex-1).width/2 then		        dragged=true		        tmp=items(lastindex-1)		        items(lastindex-1)=items(lastindex)		        items(lastindex)=tmp		        targetx=tmp.x		        i=tmp.x+lastclickedItem.width+itemseparation		        		        for j=tmp.x to i step 3		          tmp.offset(3,0)		          repaint(true)		        next		        		        lastClickedItem.lastlockedX=targetx		        tmp.x=i		        lastindex=lastindex-1		        		        //going right...		      elseif lastindex<ubound(items) and lastclickedItem.x+lastClickedItem.width>=items(lastindex+1).x+items(lastindex+1).width/2 then		        dragged=true		        tmp=items(lastindex+1)		        items(lastindex+1)=items(lastindex)		        items(lastindex)=tmp		        		        targetx=lastclickedItem.lastLockedX+tmp.width+itemseparation		        		        i=lastclickedItem.lastLockedX		        for j=tmp.x downto i step 3		          tmp.offset(-3,0)		          repaint(true)		        next		        		        lastClickedItem.lastlockedX=targetx		        tmp.x=i		        lastindex=lastindex+1		      end if		    end if		  end if		  oldx=x		  repaint(true)		End Sub	#tag EndEvent	#tag Event		Sub MouseExit()		  dim i as integer		  for i=0 to ubound(items)		    items(i).checkMouseOver(-10,-10)		  next		End Sub	#tag EndEvent	#tag Event		Sub MouseMove(X As Integer, Y As Integer)		  dim i as integer		  for i=0 to ubound(items)		    items(i).checkMouseOver(x,y)		  next		End Sub	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  //snap icons if dragged and repaint		  		  if lastclickedItem<>nil then		    if dragged then		      lastClickedItem.x=targetx		    else		      lastClickedItem.x=lastClickedItem.lastLockedX		    end if		  end if		  repaint		End Sub	#tag EndEvent	#tag Event		Sub Open()		  //init		  me.height=20+itemsize		  		  buffer=newpicture(me.width,me.height,32)		  orbackPict=me.backdrop		  buildBack		  buttonMenuWin=new buttonMenu(self)		  buttonDict=new dictionary		  		  open		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  repaint()		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub addButton(button as customToolbarbutton)		  //add button		  dim px as integer		  		  if button=nil then return		  		  px=getNextX		  button.x=px		  button.y=5		  button.parent=me		  		  addToolbarItem(button)		  		  repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addButton(icon as picture, iconmask as picture, caption as string, togles as boolean)		  me.addbutton(createjoinedPict(icon,iconmask),caption,togles)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addButton(icon as picture, iconMask as picture, caption as string, menuItems as string)		  me.addButton(createjoinedPict(icon,iconmask),caption,menuitems)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addButton(image as picture, caption as string, toggles as boolean)		  //adds a button		  dim b as customToolbarbutton		  b=new customToolbarbutton(0,5,itemSize,itemSize,image,caption,me)		  b.toggles=toggles		  addButton(b)		  		  repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addButton(image as picture, caption as string, menuItems as string)		  //adds a button that has a submenu		  		  addButton(new customToolbarbutton(0,5,itemSize,itemSize,image,caption,me,menuItems))		  repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addEmptySpace()		  addEmptySpace(itemSize)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addEmptySpace(width as integer)		  //adds an empty space to the toolbar		  dim empty as customToolbarItem		  dim px as integer		  		  px=getNextX		  empty=new customToolbarEmptySpace(px,5,width,itemSize,me)		  empty.caption="EmptySpace"+str(blankCnt)		  blankCnt=blankCnt+1		  		  addToolbarItem(empty)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addSeparator()		  //adds a separator to the toolbar		  dim separator as customToolbarseparator		  dim px as integer		  		  px=getNextX		  separator=new customToolbarSeparator(px,0,5,me.height,me)		  separator.caption="Separator"+str(sepCnt)		  sepCnt=sepCnt+1		  		  addToolbarItem(separator)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub addToolbarItem(item as customToolbarItem)		  buttonDict.value(item.caption)=item		  items.append item		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub buildBack()		  //build the background image (tiles whatever we have as backgroundPicture)		  		  dim i,j as integer		  lasth=me.height		  lastw=me.width		  		  if orbackPict=nil then return		  		  fullbackdrop=newpicture(me.width,me.height,32)		  buffer=newpicture(me.width,me.height,32)		  		  for j=0 to fullBackdrop.height step orbackPict.height		    for i=0 to fullbackdrop.width step orbackPict.width		      fullbackdrop.graphics.drawpicture orbackPict,i,j		    next		  next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub buttonEnabled(caption as string, assigns value as boolean)		  //enables or disables a button		  		  dim button as customToolbarButton		  		  button=getButton(caption)		  if button<>nil then button.enabled=value		  		  repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub buttonValue(caption as string, assigns value as boolean)		  //sets the value of a toggle button		  		  dim button as customToolbarButton		  		  button=getButton(caption)		  if button<>nil and button.toggles then 		    button.value=value		    if value then		      handleButtonHit button		    end if		  end if		  		  repaint		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function createJoinedPict(data as picture, mask as picture) As picture		  //joins a mask with a picture and returns the combined picture		  		  dim tmp as picture		  tmp=newpicture(data.width,data.height,32)		  tmp.graphics.drawpicture data,0,0		  tmp.mask.graphics.drawpicture mask,0,0		  		  return tmp		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getButton(caption as string) As customToolbarButton		  //returns a button using its caption		  if buttonDict.hasKey(caption) then		    return CustomToolbarButton(buttonDict.value(caption))		  end if		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getButtonValue(caption as string) As boolean		  //returns the state of a given button (pressed, not pressed)		  //useful with toggle buttons		  dim b as customToolbarButton		  		  if buttonDict.hasKey(caption) then		    return CustomToolbarButton(buttonDict.value(caption)).value		  end if		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getItemSize() As integer		  return itemsize		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function getNextX() As integer		  return getNextX(ubound(items))		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function getNextX(atIndex as integer) As integer		  //returns the horizontal position of the next button		  if atIndex<0 then return itemseparation		  return items(atIndex).x+items(atIndex).width+itemseparation		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub handleButtonHit(button as customToolbarButton)		  dim i as integer		  dim ch as string		  		  //if this button has a submenu...		  if button.menuitems<>"" then		    //build and show the menu		    buttonMenuWin.toolbarbuttonmenu.deleteAllRows		    for i=1 to countFields(button.menuItems,",")		      ch=nthField(button.menuItems,",",i).trim		      if ch="-" then		        buttonMenuWin.toolbarbuttonmenu.addseparator		      else		        buttonMenuWin.toolbarbuttonmenu.addrow ch		      end if		    next		    buttonMenuWin.toolbarbuttonmenu.open		  else		    //if not, just raise the event		    ButtonClicked button		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub loadState()		  //not yet implemented...		  //the idea is to be able to save and then load a toolbar configuration		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub menuItemSelected(item as string)		  //an item from the contextual menu was selected...		  		  select case item		  case "Icon only"		    if drawtext then		      drawText=false		      me.height=me.height-10		      repaint		    end if		  case "Icon and text"		    if not drawtext then		      drawText=true		      me.height=me.height+10		      repaint		    end if		  end select		  		  if lastclickedItem<>nil then		    buttonMenuSelected customToolbarButton(lastclickedItem),item		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub repaint(dragging as boolean=false)		  repaint(me.graphics,dragging)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub repaint(g as graphics, dragging as boolean)		  //draw the toolbar		  #pragma disableBackgroundTasks		  #pragma disableBoundsChecking		  		  dim i, w as integer		  dim label as string		  		  if lastw<>me.width or lasth<>me.height then buildBack		  		  if buffer=nil then return //buffer was not or has not been created		  		  if fullbackdrop<>nil then		    buffer.graphics.drawpicture fullBackdrop,0,0		  else		    buffer.graphics.clearrect 0,0,buffer.width,buffer.height		  end if		  		  //repaint contents		  for i=0 to ubound(items)		    items(i).paint(buffer.graphics,dragging)		  next		  		  //draw frame		  if drawFrame then		    buffer.graphics.foreColor=&cAAAAAA		    buffer.graphics.drawrect 0,0,g.width,g.height		  end if		  		  //draw buffer on canvas		  g.drawpicture buffer,0,0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub saveState()		  //not implemented yet		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event ButtonClicked(button as customToolbarButton)	#tag EndHook	#tag Hook, Flags = &h0		Event ButtonMenuSelected(button as customToolbarButton, item as string)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Note, Name = Info				CustomToolbar		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				A little toolbar experiment, use the different addButton methods to populate the toolbar.		you can also drag the toolbar objects to yor window and then add them to your particular toolbar.				Use in whatever way you like... at your own risk :P		let me know if you find it useful.					#tag EndNote	#tag Property, Flags = &h4		autoSaveState As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected blankCnt As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected buffer As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected buttonDict As dictionary	#tag EndProperty	#tag Property, Flags = &h1		Protected buttonMenuWin As buttonMenu	#tag EndProperty	#tag Property, Flags = &h4		draggable As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected dragged As boolean	#tag EndProperty	#tag Property, Flags = &h4		drawFrame As boolean	#tag EndProperty	#tag Property, Flags = &h4		drawText As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected fullBackdrop As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected items(-1) As CustomToolbarItem	#tag EndProperty	#tag Property, Flags = &h4		itemSeparation As integer	#tag EndProperty	#tag Property, Flags = &h4		itemSize As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastClickedItem As customToolbaritem	#tag EndProperty	#tag Property, Flags = &h1		Protected lasth As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastIndex As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastw As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected oldx As integer	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			original Back picture					#tag EndNote		Protected orBackPict As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected sepCnt As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected targetx As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="autoSaveState"			Visible=true			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="draggable"			Visible=true			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="drawFrame"			Visible=true			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="drawText"			Visible=true			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Behavior"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="itemSeparation"			Visible=true			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="itemSize"			Visible=true			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass